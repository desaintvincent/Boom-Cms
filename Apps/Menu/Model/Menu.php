<?php
namespace Apps\Menu\Model;

use Boom\Model\Model;

class Menu extends Model {
    public $prefix = 'menu_';

    function save($data = [], $table = NULL)
    {
        return parent::save($data, $table); // TODO: Change the autogenerated stub
    }

    function get_mitems($id, $parent = NULL) {
        if ($parent == NULL) {
            $query = "SELECT * FROM menu_items WHERE mitem_menu_id=:id AND mitem_parent_id is NULL ORDER BY mitem_display_order;";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
        } else {
            $query = "SELECT * FROM menu_items WHERE mitem_menu_id=:id AND mitem_parent_id=:mitem_parent;";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':mitem_parent', $parent);
        }
        $stmt->execute();
        $results = $stmt->fetchAll(\PDO::FETCH_ASSOC);

        //on cherche les enfants
        foreach ($results as $key => $result) {
            $childs = $this->get_mitems($id, $result['id']);
            if (!empty($childs)) {
                $results[$key]['children'] = $childs;
            }
        }

        return $results;
    }

    function save_items($id, $data, $parent = NULL) {
        $order = 0;
        foreach ($data as $item) {

            if ($item['deleted'] == 1) {
                //on delete l'item
                $query = "DELETE FROM `menu_items` WHERE id = :mitem_id";
                $stmt = $this->db->prepare($query);
                $stmt->bindParam(':mitem_id', $item['id']);
                $stmt->execute();
            } else if ($item['new'] == 1) {
                //nouveau item
                $query = "INSERT INTO `menu_items` (`id`, `mitem_parent_id`, `mitem_display_order`, `mitem_menu_id`, `mitem_title`, `mitem_arg`, `mitem_type`) VALUES (NULL, :mitem_parent, :mitem_order, :mitem_parent_id, :mitem_title, NULL, 1);";

                $stmt = $this->db->prepare($query);

                $stmt->bindParam(':mitem_parent', $parent);
                $stmt->bindParam(':mitem_order', $order);
                $stmt->bindParam(':mitem_parent_id', $id);
                $stmt->bindParam(':mitem_title', $item['title']);
                $stmt->execute();
                $item['id'] = $this->db->lastInsertId();


            } else {
                $query = "UPDATE menu_items SET mitem_parent_id=:mitem_parent, mitem_display_order=:mitem_order, mitem_title=:mitem_title, mitem_arg=:mitem_arg, mitem_type=:mitem_type WHERE id=:mitem_id";
                $stmt = $this->db->prepare($query);

                $stmt->bindParam(':mitem_parent', $parent);
                $stmt->bindParam(':mitem_order', $order);
                $stmt->bindParam(':mitem_title', $item['title']);


                $mitem_arg = NULL;
                $mitem_type = 1;
                if (empty($mitem_arg)) {
                    $stmt->bindParam(':mitem_arg', $mitem_arg, \PDO::PARAM_NULL);
                } else {
                    $stmt->bindParam(':mitem_arg', $mitem_arg, \PDO::PARAM_STR);
                }

                $stmt->bindParam(':mitem_type', $mitem_type);
                $stmt->bindParam(':mitem_id', $item['id']);

                $stmt->execute();
                //update item
            }

            //rÃ©cursive
            if (isset($item['children'])) {
                $this->save_items($id, $item['children'], $item['id']);
            }
            //on incrÃ©mente l'order
            $order++;
        }
    }

    function update($id, $data = null, $table = null)
    {

        $array = json_decode($data['output_items'],true);
        if (!empty($array)) {
            $this->save_items($id, $array);
        }
        unset($data['output_items']);
        return parent::update($id, $data, $table); // TODO: Change the autogenerated stub
    }
}